<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Order</title>

    <link rel="stylesheet" href="/template.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css">

    <link rel="stylesheet" href="/global.css"/>
    <link rel="stylesheet" href="/pages/order/styles.css"/>

    <meta name="viewport" content="width=device-width, initial-scale=1">
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark navbar-custom fixed-top">
        <div class="container px-5">
            <a class="navbar-brand">Backend.Food</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarResponsive" aria-controls="navbarResponsive" aria-expanded="false" aria-label="Toggle navigation"><span class="navbar-toggler-icon"></span></button>
            <div class="collapse navbar-collapse" id="navbarResponsive">
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item text-center"><a class="nav-link" href="#menu_card_parent">Menu</a></li>
                    <li class="nav-item text-center"><a class="nav-link" href="#order_card_parent">Order: <%= orderId %></a></li>
                </ul>
            </div>
        </div>
    </nav>
    <div class="vw-100 vh-100 d-flex flex-column flex-xl-row justify-content-evenly align-items-center p-5">
        <div id="menu_card_parent" class="card w-100 w-xl-50 m-4 parent-card">
            <div class="card-body h-100 d-flex flex-column justify-content-start">
                <h3>Menu</h3>
                <hr>
                <div id="tags-parent" class="overflow-x-scroll h-auto w-100 no-wrap p-2">
                    <button type="button" class="btn btn-primary" data-tag="all">All</button>
                    <% for(let i = 0; i < tags.length; i++) { %>
                        <button type="button" class="btn btn-secondary" data-tag="<%= tags[i] %>"> <%= tags[i].split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ') %> </button>
                    <% } %>
                </div>
                <div id="menu-parent" class="d-flex flex-column justify-content-start align-items-center overflow-y-scroll form-control no-wrap p-3">
                    <% for(let i = 0; i < menu.length; i++) { %>
                        <% const current = menu[i] %>
                        <div class="card w-100 menu-card mt-3 mb-3">
                            <div class="w-100 d-flex flex-column flex-md-row">
                                <div class="w-auto">
                                    <img src="/<%= current.image %>" class="menu-card-img" alt="Img">
                                </div>
                                <div class="card-body menu-card-body">
                                    <div class="overflow-x-scroll no-wrap m-0 p-0">
                                        <h3 class="card-title"><%= current.name %></h3>
                                    </div>
                                    <div class="overflow-x-scroll no-wrap">
                                        <p class="card-text"><strong>Time:</strong> <%= current.cookTime %></p>
                                    </div>
                                    <div class="overflow-x-scroll no-wrap">
                                        <p class="card-text"> <strong>Description:</strong> <%= current.description %></p>
                                    </div>
                                </div>
                                <div class="w-auto d-flex flex-row flex-md-column justify-content-evenly align-items-center m-2">
                                    <h6>â‚¹<%= current.price %></h6>
                                    <% if (current.veg) { %>
                                        <span class="dot green"></span>
                                    <% } else { %>
                                        <span class="dot red"></span>
                                    <% } %>
                                    <button type="button" class="btn btn-primary">Add</button>
                                </div>
                            </div>
                        </div>
                    <% } %>
                </div>
            </div>
        </div>
        <div id="order_card_parent" class="card w-100 w-xl-50 m-4 parent-card">
            <div class="card-body h-100 d-flex flex-column justify-content-start">
                <h3>Order Details</h3>
                <hr>
                <div id="orders-parent" class="d-flex flex-column justify-content-start align-items-center overflow-y-scroll h-100 form-control no-wrap p-3">
                    <% for(let i = 0; i < orders.length; i++) { %>
                        <% const current = orders[i] %>
                        <div class="card w-100 mt-3 mb-3">
                            <div class="w-100 d-flex flex-column flex-sm-row justify-content-evenly">
                                <div class="card-body w-100 d-flex flex-column justify-content-evenly align-items-baseline">
                                    <div class="w-100 overflow-x-scroll no-wrap">
                                        <h3 class="card-title m-0"><%= current.name %></h3>
                                    </div>
                                    <div class="w-100 p-0 d-flex justify-content-evenly align-items-center">
                                        <div class="mt-3 w-25 overflow-x-scroll no-wrap">
                                            <p class="card-text">Added by: <%= current.authorName %></p>
                                        </div>
                                        <input type="text" name="instructions" class="ms-3 w-75 form-control" placeholder="<%- current.instructions === '' ? 'Instructions' : current.instructions %>" maxlength="300">
                                    </div>
                                </div>
                                <div class="d-flex flex-row flex-sm-column justify-content-evenly align-items-center m-2">
                                    <div class="d-flex justify-content-center align-items-center">
                                        <i class="bi bi-dash-lg m-1 icon-button"></i>
                                        <h6 class="m-1"><%= current.quantity %></h6>
                                        <i class="bi bi-plus-lg m-1 icon-button"></i>
                                    </div>
                                    <div>
                                        <% if (current.status === 'ordered') { %>
                                            <i class="bi bi-list-ul fs-4 text-dark"></i>
                                        <% } else if(current.status === 'processing') { %>
                                            <i class="bi bi-hourglass-split fs-4 text-warning"></i>
                                        <% } else { %>
                                            <i class="bi bi-clipboard2-check-fill fs-4 text-success"></i>
                                        <% } %>
                                    </div>
                                </div>
                            </div>
                        </div>
                    <% } %>
                </div>
                <div class="w-100 d-flex flex-column flex-md-row justify-content-evenly align-items-center">
                    <div class="w-100 w-md-50 overflow-x-scroll no-wrap d-flex justify-content-center justify-content-md-start p-2">
                        <h3>Subtotal</h3>
                    </div>
                    <div class="w-100 w-md-50 overflow-x-scroll no-wrap d-flex justify-content-center justify-content-md-end p-2">
                        <h4 id="subtotal"></h4>
                    </div>
                </div>
                <div class="w-100 d-flex flex-column flex-md-row justify-content-evenly align-items-center">
                    <button id="confirm" class="btn btn-primary btn-xl rounded-pill m-2">Confirm</button>
                    <button id="complete" class="btn btn-primary btn-xl rounded-pill m-2">Complete</button>
                    <button id="pay" class="btn btn-primary btn-xl rounded-pill m-2">Pay</button>
                </div>
            </div>
        </div>
    </div>
    <script>
        const orderId = <%- orderId %>

        const tags = <%- JSON.stringify(tags) %>

        const menu = <%- JSON.stringify(menu) %>
        const orders = <%- JSON.stringify(orders) %>

        const tagChildren = document.getElementById('tags-parent').children
        const menuChildren = document.getElementById('menu-parent').children

        const payButton = document.getElementById('pay')
        const confirmButton = document.getElementById('confirm')
        const completeButton = document.getElementById('complete')

        payButton.onclick = () => {
            window.location.href = `/pay/${orderId}`
        }

        const ordersParent = document.getElementById('orders-parent')

        let subtotal = 0
        const subtotalText = document.getElementById('subtotal')
    </script>
    <script>
        const clickMusic = new Audio('/music/click.ogg')
        const backgroundMusic = new Audio('/music/background.ogg')

        clickMusic.loop = false
        backgroundMusic.loop = true

        clickMusic.volume = .8
        backgroundMusic.volume =.2

        clickMusic.pause()
        try
        {
            backgroundMusic.play()
        }
        catch { }

        async function clickSFX() {
            await clickMusic.play()
        }
    </script>
    <script>
        tagChildren[0].onclick = () => {
            filter(tagChildren[0], 'all')
        }

        for(let i = 0; i < tags.length; i++) {
            const current = tagChildren[i + 1]

            current.onclick = () => {
                filter(current, current.dataset.tag)
            }
        }

        function filter(button, tag) {
            tag = tag.toLowerCase()

            for(let i = 0; i < tagChildren.length; i++)
                tagChildren[i].className = 'btn btn-secondary'

            button.className = 'btn btn-primary'

            function enableChild(child) {
                child.style.margin = ''
                child.style.display = 'block'
            }

            function disableChild(child) {
                child.style.margin = '0'
                child.style.display = 'none'
            }

            if (tag === 'all')
            {
                for(let i = 0; i < menuChildren.length; i++)
                    enableChild(menuChildren[i])

                return
            }

            for(let i = 0; i < menuChildren.length; i++)
                if(menu[i].tags.includes(tag))
                    enableChild(menuChildren[i])
                else
                    disableChild(menuChildren[i])

            clickSFX().then()
        }
    </script>
    <script>
        function renderSubtotal(value) {
            subtotal = value
            subtotalText.innerHTML = `â‚¹${subtotal}`
        }

        function createCard(name) {
            const card = document.createElement('div')
            card.className = 'card w-100 mt-3 mb-3'

            const container = document.createElement('div')
            container.className = 'w-100 d-flex flex-column flex-sm-row justify-content-evenly'

            const left = document.createElement('div')
            left.className = 'card-body w-100 d-flex flex-column justify-content-evenly align-items-baseline'

            const titleWrapper = document.createElement('div')
            titleWrapper.className = 'w-100 overflow-x-scroll no-wrap'

            const title = document.createElement('h3')
            title.className = 'card-title m-0'
            title.textContent = name

            titleWrapper.appendChild(title)

            const instructionRow = document.createElement('div')
            instructionRow.className = 'w-100 p-0 d-flex justify-content-evenly align-items-center'

            const authorWrapper = document.createElement('div')
            authorWrapper.className = 'mt-3 w-25 overflow-x-scroll no-wrap'

            const authorText = document.createElement('p')
            authorText.className = 'card-text'
            authorText.textContent = `Added by you!`

            authorWrapper.appendChild(authorText)

            const input = document.createElement('input')
            input.type = 'text'
            input.name = 'instructions'
            input.className = 'ms-3 w-75 form-control'
            input.placeholder = ''
            input.maxLength = 300

            instructionRow.appendChild(authorWrapper)
            instructionRow.appendChild(input)

            left.appendChild(titleWrapper)
            left.appendChild(instructionRow)

            const right = document.createElement('div')
            right.className = 'd-flex flex-row flex-sm-column justify-content-evenly align-items-center m-2'

            const quantityControl = document.createElement('div')
            quantityControl.className = 'd-flex justify-content-center align-items-center'

            const minusIcon = document.createElement('i')
            minusIcon.className = 'bi bi-dash-lg m-1 icon-button'

            const quantity = document.createElement('h6')
            quantity.className = 'm-1'
            quantity.textContent = '1'

            const plusIcon = document.createElement('i')
            plusIcon.className = 'bi bi-plus-lg m-1 icon-button'

            quantityControl.appendChild(minusIcon)
            quantityControl.appendChild(quantity)
            quantityControl.appendChild(plusIcon)

            const statusIconWrapper = document.createElement('div')
            const statusIcon = document.createElement('i')
            statusIcon.className = 'bi bi-list-ul fs-4 text-dark'

            statusIconWrapper.appendChild(statusIcon)

            right.appendChild(quantityControl)
            right.appendChild(statusIconWrapper)

            container.appendChild(left)
            container.appendChild(right)
            card.appendChild(container)

            return [card, quantity, minusIcon, plusIcon, input]
        }

        function addItem(index) {
            const item = menu[index]

            payButton.disabled = true
            completeButton.disabled = true

            for (let i = 0; i < orders.length; i++) {
                const current = orders[i]
                if (current.foodId === item.id && current.status === 'ordered') {
                    incrementOrder(current)
                    return
                }
            }

            const order = {
                id: -1,
                foodId: item.id,
                quantity: 1,
                instructions: '',
                status: 'ordered',
                state: 2,
                price: item.price
            }

            const htmlElements = createCard(item.name)
            ordersParent.appendChild(htmlElements[0])

            order.quantityText = htmlElements[1]

            order.decreaseButton = htmlElements[2]
            order.decreaseButton.onclick = () => {
                decrementOrder(order)
            }

            order.increasedButton = htmlElements[3]
            order.increasedButton.onclick = () => {
                incrementOrder(order)
            }

            htmlElements[4].onchange = (e) => {
                order.instructions = e.target.value
                order.status = 1
            }

            renderSubtotal(subtotal + item.price)
            orders[orders.length] = order

            clickSFX().then()
        }

        function incrementOrder(order) {
            if(order.state < 1)
                order.state = 1

            order.quantity += 1
            renderSubtotal(subtotal + order.price)

            order.quantityText.style.color = 'black'
            order.decreaseButton.dataset.status = 'true'
            order.quantityText.innerHTML = order.quantity.toString()

            clickSFX().then()
        }

        function decrementOrder(order) {
            if (order.decreaseButton.dataset.status === 'false')
                return

            if (order.state < 1)
                order.state = 1

            order.quantity -= 1
            renderSubtotal(subtotal - order.price)

            if (order.quantity === 0) {
                order.quantityText.style.color = 'red'
                order.decreaseButton.dataset.status = 'false'
            }

            order.quantityText.innerHTML = order.quantity.toString()

            clickSFX().then()
        }

        async function confirm() {
            const actions = []

            for(let i = 0; i < orders.length; i++) {
                const order = orders[i]

                switch(order.state) {
                    case 1:
                    case 2:
                        actions.push({
                            id: order.id,
                            foodId: order.foodId,
                            quantity: order.quantity,
                            instructions: order.instructions,
                            state: order.state
                        })
                        break
                    default:
                        break
                }
            }

            if(actions.length > 0)
                await fetch(`/order/update/${orderId}`, {
                    method: `POST`,
                    headers: {
                        'Accept' : 'application/json',
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        actions: actions
                    })
                })
        }

        function setup() {
            if(<%- !completed %>)
                for(let i = 0; i < menuChildren.length; i++) {
                    menuChildren[i].querySelector('button').onclick = () => {
                        addItem(i)
                    }
                }
            else
                for(let i = 0; i < menuChildren.length; i++)
                    menuChildren[i].querySelector('button').disabled = true

            const ordersChildren = ordersParent.children
            for(let i = 0; i < ordersChildren.length; i++) {
                const order = orders[i]
                const htmlElement = ordersChildren[i]

                const input = htmlElement.querySelector('input')
                const buttons = htmlElement.querySelectorAll('i')
                const quantityText = htmlElement.querySelector('h6')

                for(let i = 0; i < menu.length; i++)
                {
                    const current = menu[i]
                    if(current.id === order.foodId)
                    {
                        order.price = current.price
                        subtotal += current.price * order.quantity
                        break
                    }
                }

                renderSubtotal(subtotal)

                if(order.status === 'ordered') {
                    buttons[0].onclick = () => {
                        decrementOrder(order)
                    }

                    buttons[1].onclick = () => {
                        incrementOrder(order)
                    }

                    buttons[0].dataset.status = 'true'
                    buttons[1].dataset.status = 'true'

                    input.onchange = (e) => {
                        order.instructions = e.target.value
                        order.status = 1
                    }

                    order.state = 0
                    order.quantityText = quantityText
                    order.decreaseButton = buttons[0]

                    payButton.disabled = true
                    completeButton.disabled = true
                }
                else {
                    input.readOnly = true
                    input.value = order.instructions

                    buttons[0].dataset.status = 'false'
                    buttons[1].dataset.status = 'false'

                    order.state = 3

                    if(order.status === 'processing') {
                        payButton.disabled = true
                        completeButton.disabled = true
                    }
                }
            }
        }
    </script>
    <script>
        if(<%- completed %>)
        {
            confirmButton.onclick = () => {
                window.location.href = '/dashboard'
            }

            completeButton.disabled = true
        }
        else
        {
            confirmButton.onclick = async () => {
                await confirm()
                window.location.href = '/dashboard'
            }

            completeButton.onclick = async () => {
                await fetch(`/order/complete/${orderId}`, {
                    method: 'POST',
                    headers: {
                        'Accept' : 'application/json'
                    }
                })

                window.location.reload()
            }
        }

        if(<%- !completed %> || <%- payed %>)
            payButton.disabled = true
        else
            payButton.onclick = () => {
                window.location.href = `/pay/${orderId}`
            }

        setup()
    </script>
    <script type="module" src="/bootstrap_js/bootstrap.bundle.min.js"></script>
</body>
</html>